// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model AdminUser {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    full_name      String    @default("")
    email_address  String    @default("")
    // usdc_balance   Int       @default(0)
    // totalNFTS      Int       @default(0)
    wallet_address String    @unique
    created_at     DateTime  @default(now())
    updated_at     DateTime  @default(now()) @updatedAt
    UserNFTs       NFTData[]

    // NFTOffer       NFTOffer[]
    // NFTAuction     NFTAuction[]
    // To return `Date`s intact through the API we use transformers
    // https://trpc.io/docs/data-transformers
    // This is unique so it can be used for cursor-based pagination
    @@map("admin_user")
}

// store nfts which created by store owners

model NFTData {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    nft_creator String?
    nft_owner   String?
    price       String?
    ipfs_url    String?
    name        String?
    description String?
    token_id    String?   @unique
    is_listed   Boolean?  @default(false)
    created_at  DateTime  @default(now())
    updated_at  DateTime  @default(now()) @updatedAt
    owner_id    String    @db.ObjectId
    AdminUser   AdminUser @relation(fields: [owner_id], references: [id])
    // NFTOffer    NFTOffer[]
    // NFTAuction  NFTAuction[]

    @@index([owner_id])
    @@map("user_nfts")
}

// model NFTOffer {
//     id          String         @id @default(auto()) @map("_id") @db.ObjectId
//     nftDataId   String         @db.ObjectId
//     adminUserId String         @db.ObjectId
//     price       String
//     status      NFTOfferStatus // You can define an enum for offer statuses
//     created_at  DateTime       @default(now())
//     updated_at  DateTime       @default(now()) @updatedAt
//     NFTData     NFTData        @relation(fields: [nftDataId], references: [id])
//     AdminUser   AdminUser      @relation(fields: [adminUserId], references: [id])

//     @@map("nft_offers")
// }

// enum NFTOfferStatus {
//     PENDING
//     ACCEPTED
//     REJECTED
//     WITHDRAWN
// }

// model NFTAuction {
//     id            String           @id @default(auto()) @map("_id") @db.ObjectId
//     nftDataId     String           @db.ObjectId
//     adminUserId   String           @db.ObjectId
//     startingPrice String
//     currentBid    String
//     endTime       DateTime
//     status        NFTAuctionStatus
//     created_at    DateTime         @default(now())
//     updated_at    DateTime         @default(now()) @updatedAt
//     NFTData       NFTData          @relation(fields: [nftDataId], references: [id])
//     AdminUser     AdminUser        @relation(fields: [adminUserId], references: [id])

//     @@map("nft_auctions")
// }

// enum NFTAuctionStatus {
//PENDING
//     ACTIVE
//     COMPLETED
//     CANCELED
// }
